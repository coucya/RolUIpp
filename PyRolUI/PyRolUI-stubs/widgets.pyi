
from typing import List, Tuple, overload, Callable

from .signals import Signal
from .propertys import Property

from PyRolUI import Point, Vec2i, Size, Color, Image, Widget, SingleChildWidget, MultiChildWidget


class SizeUnit:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, px: int) -> None: ...
    @overload
    def __init__(self, per: float) -> None: ...
    def type(self): ...
    def pixel(self) -> int: ...
    def percentage(self) -> float: ...


class BoxWidget(SingleChildWidget):
    round: Property
    border_width: Property
    border_color: Property
    background_color: Property
    def __init__(self): ...


class SizedWidget(SingleChildWidget):
    width: Property
    height: Property
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, w: SizeUnit, h: SizeUnit) -> None: ...


class AlignWidget(SingleChildWidget):
    align_x: Property
    aling_y: Property
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, w: float, h: float) -> None: ...


class MarginWidget(SingleChildWidget):
    top: Property
    bottom: Property
    left: Property
    right: Property
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, margin: float) -> None: ...
    @overload
    def __init__(self, w: float, h: float) -> None: ...
    @overload
    def __init__(self, top: float, bottom: float, left: float, right: float) -> None: ...


class StackWidget(MultiChildWidget):
    align_x: Property
    aling_y: Property
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, w: float, h: float) -> None: ...


class DeckWidget(MultiChildWidget):
    selected: Property
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, selected: int) -> None: ...


class ColumnWidget(MultiChildWidget):
    gap: Property
    cross_axis_alignment: Property
    def __init__(self) -> None: ...


class RowWidget(MultiChildWidget):
    gap: Property
    cross_axis_alignment: Property
    def __init__(self) -> None: ...


class FlexFit:
    fixed: FlexFit
    percentage: FlexFit
    flex: FlexFit
    expand: FlexFit


class Direction:
    row: Direction
    column: Direction
    row_reverse: Direction
    column_reverse: Direction


class FlexableWidget(SingleChildWidget):
    fit: Property
    flex: Property
    percentage: Property
    fixed: Property
    def __init__(self) -> None: ...


class ColumnGridWidget(MultiChildWidget):
    def __init__(self) -> None: ...


class RowGridWidget(MultiChildWidget):
    def __init__(self) -> None: ...


class FlexWidget(MultiChildWidget):
    cross_axis_alignment: Property
    direction: Property


class PointerListener(SingleChildWidget):
    def __init__(self) -> None: ...
    on_up: Signal
    on_down: Signal
    on_click: Signal
    on_move: Signal
    on_drag: Signal
    on_hover: Signal


class MouseListener(SingleChildWidget):
    def __init__(self) -> None: ...
    on_up: Signal
    on_down: Signal
    on_click: Signal
    on_drag: Signal
    on_move: Signal
    on_hover: Signal
    on_wheel: Signal


class FocusListener(SingleChildWidget):
    def __init__(self) -> None: ...
    def focus(self): ...
    def unfocus(self): ...
    on_focus: Signal


class CharInputListener(SingleChildWidget):
    def __init__(self) -> None: ...
    on_input: Signal


class KeyboardListener(SingleChildWidget):
    def __init__(self) -> None: ...
    on_key: Signal


class ScrollView(SingleChildWidget):
    offset: Property
    def __init__(self) -> None: ...
    def widget_pos(self) -> Point: ...
    def widget_x(self) -> int: ...
    def widget_y(self) -> int: ...
    def widget_x_ratio(self) -> float: ...
    def widget_y_ratio(self) -> float: ...
    def scroll_by_px(self, dx: int, dy: int): ...
    def scroll_by_ratio(self, x: float, y: float): ...
    def scroll_x_by_px(self, dx: int): ...
    def scroll_y_by_px(self, dy: int): ...
    def scroll_x_by_ratio(self, x: float): ...
    def scroll_y_by_ratio(self, y: float): ...
    def scroll_to_px(self, x: int, y: int): ...
    def scroll_to_ratio(self, x: float, y: float): ...
    def scroll_x_to_px(self, x: int): ...
    def scroll_y_to_px(self, y: int): ...
    def scroll_x_to_ratio(self, x: float): ...
    def scroll_y_to_ratio(self, y: float): ...


class VScrollView(ScrollView):
    scroll_step: Property
    def __init__(self) -> None: ...


class HScrollView(ScrollView):
    scroll_step: Property
    def __init__(self) -> None: ...


class ITextSpan(Widget):
    def pos_to_index(self, pos: Point) -> int: ...
    def index_to_pos(self, idx: int) -> Point: ...
    def char_count(self) -> int: ...
    def line_height(self) -> int: ...


class TextSpanWidget(ITextSpan, Widget):
    font_size: Property
    font_color: Property
    font_name: Property
    text: Property
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, text: str) -> None: ...
    def pos_to_index(self, pos: Point) -> int: ...
    def index_to_pos(self, idx: int) -> Point: ...
    def line_height(self) -> int: ...
    def char_count(self) -> int: ...
    def char_byte_size(self, idx: int) -> int: ...
    def char_index_to_byte_index(self, idx: int) -> int: ...
    def byte_index_to_char_index(self, idx: int) -> int: ...


class RichTextLineWidget(ITextSpan, FlexWidget):
    def __init__(self) -> None: ...
    def pos_to_index(self, pos: Point) -> int: ...
    def index_to_pos(self, idx: int) -> Point: ...
    def char_count(self) -> int: ...
    def line_height(self) -> int: ...


class RichTextWidget(ColumnWidget):
    def __init__(self) -> None: ...
    def pos_to_index(self, pos: Point) -> int: ...
    def index_to_pos(self, idx: int) -> Point: ...
    def char_count(self) -> int: ...


class EditableTextWidget(TextSpanWidget):
    cursor_index: Property
    def __init__(sel) -> None: ...
    def is_blinkint(self) -> bool: ...
    def set_blink(self, b: bool): ...
    def delete_front(self): ...
    def delete_back(self): ...
    def insert_char(self, idx: int, codepoint: int): ...
    def insert_str(self, text: str): ...


class TextBoxWidget(EditableTextWidget):
    def __init__(sel) -> None: ...


class HSeparatorWidget(Widget):
    color: Property
    width: Property
    def __init__(self) -> None: ...


class VSeparatorWidget(Widget):
    color: Property
    width: Property
    def __init__(self) -> None: ...
