
from typing import List, Tuple, overload, Callable

from .signals import Signal
from .propertys import Property

from PyRolUI import Point, Vec2i, Size, Color, Image, Widget, SingleChildWidget, MultiChildWidget


class SizeUnit:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, px: int) -> None: ...
    @overload
    def __init__(self, per: float) -> None: ...
    def type(self): ...
    def pixel(self) -> int: ...
    def percentage(self) -> float: ...


class BoxWidget(SingleChildWidget):
    round: Property
    border_width: Property
    border_color: Property
    background_color: Property
    def __init__(self): ...


class SizedBoxWidget(SingleChildWidget):
    width: Property
    height: Property
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, w: SizeUnit, h: SizeUnit) -> None: ...


class AlignWidget(SingleChildWidget):
    align_x: Property
    aling_y: Property
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, w: float, h: float) -> None: ...


class MarginWidget(SingleChildWidget):
    top: Property
    bottom: Property
    left: Property
    right: Property
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, margin: float) -> None: ...
    @overload
    def __init__(self, w: float, h: float) -> None: ...
    @overload
    def __init__(self, top: float, bottom: float, left: float, right: float) -> None: ...


class StackWidget(MultiChildWidget):
    align_x: Property
    aling_y: Property
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, w: float, h: float) -> None: ...


class DeckWidget(MultiChildWidget):
    selected: Property
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, selected: int) -> None: ...


class ColumnWidget(MultiChildWidget):
    gap: Property
    cross_axis_alignment: Property
    def __init__(self) -> None: ...


class RowWidget(MultiChildWidget):
    gap: Property
    cross_axis_alignment: Property
    def __init__(self) -> None: ...


class ColumnGridWidget(MultiChildWidget):
    def __init__(self) -> None: ...
    def flex_of(self, idx: int) -> float: ...
    def flex_sum(self) -> float: ...
    def add_child(self, child: Widget) -> ColumnGridWidget: ...
    def set_child(self, idx: int, child: Widget) -> ColumnGridWidget: ...
    @overload
    def remove_child(self, w: Widget): ...
    @overload
    def remove_child(self, idx: int): ...


class RowGridWidget(MultiChildWidget):
    def __init__(self) -> None: ...
    def flex_of(self, idx: int) -> float: ...
    def flex_sum(self) -> float: ...
    def add_child(self, child: Widget) -> RowGridWidget: ...
    def set_child(self, idx: int, child: Widget) -> RowGridWidget: ...
    @overload
    def remove_child(self, w: Widget): ...
    @overload
    def remove_child(self, idx: int): ...


class PointerListenerWidget(SingleChildWidget):
    def __init__(self) -> None: ...
    on_up: Signal
    on_down: Signal
    on_click: Signal
    on_move: Signal
    on_drag: Signal
    on_hover: Signal


class MouseAreaWidget(SingleChildWidget):
    def __init__(self) -> None: ...
    on_up: Signal
    on_down: Signal
    on_click: Signal
    on_drag: Signal
    on_move: Signal
    on_hover: Signal
    on_wheel: Signal


class FocusWidget(SingleChildWidget):
    def __init__(self) -> None: ...
    def focus(self): ...
    def unfocus(self): ...
    on_focus: Signal


class CharImputWidget(SingleChildWidget):
    def __init__(self) -> None: ...
    on_input: Signal


class ScrollWidget(SingleChildWidget):
    offset: Property
    def __init__(self) -> None: ...
    def widget_pos(self) -> Point: ...
    def widget_x(self) -> int: ...
    def widget_y(self) -> int: ...
    def widget_x_ratio(self) -> float: ...
    def widget_y_ratio(self) -> float: ...
    def scroll_by_px(self, dx: int, dy: int): ...
    def scroll_by_ratio(self, x: float, y: float): ...
    def scroll_x_by_px(self, dx: int): ...
    def scroll_y_by_px(self, dy: int): ...
    def scroll_x_by_ratio(self, x: float): ...
    def scroll_y_by_ratio(self, y: float): ...
    def scroll_to_px(self, x: int, y: int): ...
    def scroll_to_ratio(self, x: float, y: float): ...
    def scroll_x_to_px(self, x: int): ...
    def scroll_y_to_px(self, y: int): ...
    def scroll_x_to_ratio(self, x: float): ...
    def scroll_y_to_ratio(self, y: float): ...


class TextWidget(Widget):
    font_size: Property
    font_color: Property
    font_name: Property
    text: Property
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, text: str) -> None: ...
    def pos_to_index(self, pos: Point) -> int: ...
    def index_to_pos(self, idx: int) -> Point: ...
    def line_height(self) -> int: ...


class EditableTextWidget(TextWidget):
    cursor_index: Property
    def __init__(sel) -> None: ...
    def is_blinkint(self) -> bool: ...
    def set_blink(self, b: bool): ...
    def delete_front(self): ...
    def delete_back(self): ...
    def insert_char(self, idx: int, codepoint: int): ...
    def insert_str(self, text: str): ...


class TextBoxWidget(EditableTextWidget):
    def __init__(sel) -> None: ...


def text(text: str, *, size: int, color: Color) -> TextWidget: ...
def textbox(*, text: str, font_size: int, color: Color) -> TextBoxWidget: ...
def label(text: str, *, size: int, color: Color, background_color: Color) -> Widget: ...
def image(image: Image) -> Widget: ...


@overload
def button(text: str, *, callback: Callable, text_size: int, text_color: Color, normal: Color, hover: Color, press: Color, round: int) -> Widget: ...
@overload
def button(*, callback: Callable, normal: Widget, hover: Widget, press: Widget) -> Widget: ...


def box(*, child: Widget, round: int, border_width: int, border_color: Color, background_color: Color) -> BoxWidget: ...
def align(*, child: Widget, x: float, y: float): ...
def sized(*, child: Widget, width: int | float, height: int | float) -> SizedBoxWidget: ...


@overload
def margin(*, child: Widget, margin: int) -> MarginWidget: ...
@overload
def margin(*, child: Widget, x: int, y: int) -> MarginWidget: ...
@overload
def margin(*, child: Widget, top: int, right: int, bottom: int, left: int) -> MarginWidget: ...


def stack(*, children: List[Widget], align_x: float, align_y: float) -> StackWidget: ...
def deck(*, children: List[Widget], selected: int) -> DeckWidget: ...


def row(*, children: List[Widget], gap: int, cross_axis_alignment: float) -> RowWidget: ...
def column(*, children: List[Widget], gap: int, cross_axis_alignment: float) -> RowWidget: ...
def row_grid(*, children: List[Widget], flexs: Tuple[float]) -> RowGridWidget: ...
def column_grid(*, children: List[Widget], flexs: Tuple[float]) -> RowGridWidget: ...


def pointer_listener(*, child: Widget) -> PointerListenerWidget: ...
def mouse_area(*, child: Widget) -> PointerListenerWidget: ...
